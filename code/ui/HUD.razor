@using Sandbox;
@using Sandbox.UI;
@namespace Reprint
@inherits PanelComponent

<root>
	@switch (view)
	{
		case "main":
			<div class="main view">
				<div class="title">Fauxto Shop</div>
				<div class="subtitle">a game by alxl</div>
				<div class="gap"></div>
				<div class="menu-list">
					<button class="stealth" @onclick=@ClickLevelSelect>level select</button>
					<button class="stealth" @onclick=@ClickDaily>daily hipster</button>
					<button class="stealth" @onclick=@ClickImport>import puzzle</button>
					<button class="stealth" @onclick=@ClickDesigner>puzzle designer</button>
					<button class="stealth" @onclick=@ClickCredit>credits</button>
				</div>
			</div>
			break;

		case "credit":
			<div class="main view">
				<div class="title">Fauxto Shop</div>
				<div class="subtitle">a game by alxl</div>
				<div class="gap"></div>
				<div class="menu-list">
					<div>Made in 2 weeks for S&box Game Jam #1</div>
					<div>(which is extremely poorly named cuz it's at least the 4th game jam for s&box)</div>
					<div>Sounds by Kenney</div>
					<div>Icons from Material Icons, Tabler Icons, and Fluent Emoji</div>
				</div>
				<div class="gap"></div>
				<div class="menu-list">
					<button class="stealth" @onclick=@ClickMenu>back</button>
				</div>
			</div>
			break;

		case "levels":
			<div class="levels view">
				<div class="subtitle">level select</div>
				<div class="sidebars">
					<div class="level-list">
						@{
							var order = Scenario.Order;
							var idx = 1;
							foreach (var scene in order)
							{
								if (idx == 1 && (hoveredScene == null || hoverIsImported))
									ClickLevelInfo(scene);
								<button class="roundy @(hoveredScene == scene ? "pressed" : "")" @onclick=@(() =>
					ClickLevelInfo(scene))> #@idx @(scene.Title)</button>
								idx++;
							}
						}
					</div>
					<div class="brief wide">
						<div class="title">@(hoveredScene.Title)</div>
						<PaintCanvas @cursor=@false @paintSource=@(() => hoveredScene.Paint) @size=@(300.0f)>
						</PaintCanvas>
						<div class="leader">
							@foreach (var data in Score.DataFor(hoveredScene))
							{
								<div class="col">
									<div class="head">@(data.name)</div>
									<div><span class="name">You</span><span class="score">@(data.me.Min)</span></div>
									<div class="divider-h"></div>
									@foreach (var entry in data.friends.Entries)
									{
										<div>
											<span class="name">@(entry.DisplayName)</span>
											<span class="score">@(GetCurrentScore(data, entry))</span>
										</div>
									}
									<div class="divider-h"></div>
									<div><span class="name">World Best</span><span class="score">@(data.WorldBest)</span></div>
									<div><span class="name">World Avg</span><span class="score">@(data.WorldAvg)</span></div>
								</div>
							}
						</div>
						<button style="margin-bottom: 16px" class="roundy" @onclick=@ClickPlayHovered>Play</button>
					</div>
				</div>
				<div class="gutter">
					<button class="stealth" @onclick=@ClickMenu>back</button>
				</div>
			</div>
			break;

		case "import":
			<div class="import view">
				<div class="subtitle">import a puzzle</div>
				<div class="sidebars">
					<div class="importer">
						<div class="explainer">
							<p>Using the puzzle designer, players can make their own puzzles and challenge others to them.</p>
							<p>Be warned that puzzles made this way are not guaranteed to be solvable!</p>
						</div>
						<TextEntry class="io" Value:bind=@ImportCode />
						<button class="stealth" @onclick=@ClickImportData>import</button>
					</div>
					<div class="brief wide">
						@if (hoveredScene is not null && !importedScene.IsEmpty)
						{
							<div class="title">@(hoveredScene.Title)</div>
							<PaintCanvas @cursor=@false @paintSource=@(() => hoveredScene.Paint) @size=@(300.0f)>
							</PaintCanvas>
							<div class="leader">
								@foreach (var data in Score.DataFor(hoveredScene))
								{
									<div class="col">
										<div class="head">@(data.name)</div>
										<div><span class="name">You</span><span class="score">@(data.me.Min)</span></div>
										<div class="divider-h"></div>
										@foreach (var entry in data.friends.Entries)
										{
											<div>
												<span class="name">@(entry.DisplayName)</span>
												<span class="score">@(GetCurrentScore(data, entry))</span>
											</div>
										}
										<div class="divider-h"></div>
										<div><span class="name">World Best</span><span class="score">@(data.WorldBest)</span></div>
										<div><span class="name">World Avg</span><span class="score">@(data.WorldAvg)</span></div>
									</div>
								}
							</div>
							<button style="margin-bottom: 16px" class="roundy" @onclick=@ClickPlayHovered>Play</button>
						}
					</div>
				</div>
				<div class="gutter">
					<button class="stealth" @onclick=@ClickMenu>back</button>
				</div>
			</div>
			break;

		case "daily":
			<div class="import view">
				<div class="subtitle">daily hipster</div>
				<div class="sidebars">
					<div class="importer">
						<div class="explainer">
							<p>Listen, every day there's a new hipster that comes round the shop and says that our current
								inventory is too... "mainstream." They want something a little more avant garde, a little
								Pollock.</p>
							<p>That shouldn't be too hard, right?</p>
						</div>
						<div class="date">
							<TextEntry class="yyyy" MaxLength=@(4) numeric=@true Value:bind=@DailyYear />
							<span>-</span>
							<TextEntry class="mm" MaxLength=@(2) numeric=@true Value:bind=@DailyMonth />
							<span>-</span>
							<TextEntry class="dd" MaxLength=@(2) numeric=@true Value:bind=@DailyDay />
							<div class="divider-v"></div>
							<button class="stealth" @onclick=@ClickImportDaily>view</button>
						</div>
						<button class="stealth" @onclick=@ClickImportToday>today</button>
					</div>
					<div class="brief wide">
						@if (hoveredScene is not null && !importedScene.IsEmpty)
						{
							<div class="title">@(hoveredScene.Title)</div>
							<PaintCanvas @cursor=@false @paintSource=@(() => hoveredScene.Paint) @size=@(300.0f)>
							</PaintCanvas>
							<div class="leader">
								@foreach (var data in Score.DataFor(hoveredScene))
								{
									<div class="col">
										<div class="head">@(data.name)</div>
										<div><span class="name">You</span><span class="score">@(data.me.Min)</span></div>
										<div class="divider-h"></div>
										@foreach (var entry in data.friends.Entries)
										{
											<div>
												<span class="name">@(entry.DisplayName)</span>
												<span class="score">@(GetCurrentScore(data, entry))</span>
											</div>
										}
										<div class="divider-h"></div>
										<div><span class="name">World Best</span><span class="score">@(data.WorldBest)</span></div>
										<div><span class="name">World Avg</span><span class="score">@(data.WorldAvg)</span></div>
									</div>
								}
							</div>
							<button style="margin-bottom: 16px" class="roundy" @onclick=@ClickPlayHovered>Play</button>
						}
					</div>
				</div>
				<div class="gutter">
					<button class="stealth" @onclick=@ClickMenu>back</button>
				</div>
			</div>
			break;

		case "ingame":
			<div class="view @(workspace.Dragging ? "mousewatch" : "")" @onmouseup=@EndDrag>
				@if (workspace.IsCompleted)
				{
					<div class="view score">
						<div class="subtitle">Nice work!</div>
						<div class="sidebars">
							<div class="divider-v"></div>
							<div class="divider-v"></div>
							<div class="leader big">
								@foreach (var data in Score.DataFor(hoveredScene))
								{
									<div class="col">
										<div class="head">@(data.name)</div>
										<div>
											<span class="name">This Solution</span>
											<span class="score">@(GetSolutionScore(data))</span>
										</div>
										<div class="divider-h"></div>
										@foreach (var entry in data.friends.Entries)
										{
											<div>
												<span class="name">@(entry.DisplayName)</span>
												<span class="score">@(GetCurrentScore(data, entry))</span>
											</div>
										}
										<div class="divider-h"></div>
										<div>
											<span class="name">World Best</span>
											<span class="score">@(data.WorldBest)</span>
										</div>
										<div>
											<span class="name">World Avg</span>
											<span class="score">@(data.WorldAvg)</span>
										</div>
									</div>
								}
							</div>
							<div class="finishmenu">
								<PaintCanvas class="large" @cursor=@false @paint=@(workspace.targetPaint) @size=@(400.0f)>
								</PaintCanvas>
								<div class="divider-h"></div>
								<div class="menu-list">
									<button class="roundy" @onclick=@ClickRefine>One more tweak...</button>
									<button class="roundy" @onclick=@ClickNextLevel>Next Level</button>
									<button class="roundy" @onclick=@ClickQuitLevel>Level Select</button>
								</div>
							</div>
						</div>
					</div>
				}
				else
				{
					<div class="sidebars">
						<div class="brief @IngameBriefClass">
							<div class="title">@(workspace.currentScene.title)</div>
							<div class="desc">
								@{
									var lines = workspace.currentScene.desc.Split('\n');
									foreach (var line in lines)
									{
										<p>@line</p>
									}
								}
							</div>
							<div class="goal">
								<PaintCanvas @listener=@goalInsp @cursor=@false @paint=@(workspace.targetPaint) @size=@(256.0f)>
								</PaintCanvas>
								<div class="readout">@(goalInsp.CreateHoverReadoutVerbose(workspace.targetPaint))</div>
							</div>
							<button class="roundy minmax" @onclick=@IgBriefShrink>
								@(IngameBriefClass == "hidden" ? "chevron_right" : "chevron_left")
							</button>
							<button class="roundy minmax bot" @onclick=@IgBriefExp>
								chevron_right
							</button>
						</div>
						<div class="gap"></div>
						<div class="brief min">
							<div class="title">Result</div>
							<div class="goal">
								<PaintCanvas @listener=@resultInsp @paint=@(workspace.scratchPaint) @size=@(256.0f)>
								</PaintCanvas>
								<div class="readout">@(resultInsp.CreateHoverReadoutVerbose(workspace.scratchPaint))</div>
							</div>
							<div style="flex-direction: column">
								<div class="acc">@(workspace.sequenceScore.ToString("0%"))</div>
								<div class="leader">
									<div class="col">
										<div class="head">Time</div>
										<div>
											<span class="lone">@(workspace.finalScores.time)</span>
										</div>
									</div>
									<div class="col">
										<div class="head">Ink</div>
										<div>
											<span class="lone">@(workspace.finalScores.ink)</span>
										</div>
									</div>
									<div class="col">
										<div class="head">Size</div>
										<div>
											<span class="lone">@(workspace.finalScores.size)</span>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="toolbox">
						<div class="group">
							<button @onclick=@ClickQuitLevel>Quit</button>
						</div>
						<div class="gap"></div>
						<div class="group">
							@foreach (var t in workspace.currentScene.Tools)
							{
								var hasImg = (t.ImagePath ?? "") != "";
								<button Tooltip=@(hasImg ? t.Title : "") class="tool" @onmousedown=@(() => workspace.AddStep(t.Prefab))>
									@if (hasImg)
									{
										<img style="width: 64px; height: 64px" src=@(t.ImagePath) />
									}
									else
									{
										<span>@(t.Title)</span>
									}
								</button>
							}
						</div>
						<div class="gap"></div>
						<div class="group">
							<button @onclick=@SubmitSequence>Submit</button>
						</div>
					</div>
				}
			</div>
			break;

		case "design":
			<div class="view @(designer.IsMouseDown ? "mousewatch" : "")" @onmouseup=@(designer.ReleaseMouse)>
				<div class="design-up">
					<div class="brief">
						<TextEntry Value:bind=@DesignerTitle />
						<TextEntry class="tall" Multiline=@true Value:bind=@DesignerDesc />
						<div class="controls">
							<div class="gap"></div>
							<span style="font-size: 32px; padding: 5px 0px 0px 8px">size</span>
							<TextEntry MaxLength=@(2) numeric=@true Value:bind=@DesignerSize @onchange=@UpdateDesignerSize />
						</div>
						<div class="controls">
							<button class="roundy" @onclick=@DesignerImport>Import</button>
							<button class="roundy" @onclick=@DesignerExport>Export</button>
							<button class="roundy" @onclick=@DesignerExportPaint>Exp. Paint</button>
						</div>
						<TextEntry class="io" Value:bind=@DesignerIO />
					</div>
					<div class="design-work">
						<PaintCanvas @listener=@designer class="big" @cursor=@false @paintSource=@(designer.PaintSource)
							@size=@(512.0f)>
						</PaintCanvas>
					</div>
				</div>
				<div class="toolbox">
					<button @onclick=@ClickMenu>Back</button>
					<div
						style="width: 64px; height: 64px; background-color: @(designer.CalculatedColor.Hex); border: 2px solid @(Pixel.CalculateContrastColor(designer.brushDarken).Hex)">
					</div>
					<div class="group">
						@foreach (Pixel.ColorLookup clr in System.Enum.GetValues<Pixel.ColorLookup>())
						{
							var sel = designer.brushColor == clr;
							var color = Pixel.GetColor(clr);
							<button @onclick=@(() => designer.brushColor = clr) class="clr @(sel ? "pressed" : "")"
								style="color: @color.color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span
									class="lbl">@(color.Initial)</span></button>
						}
					</div>
					<div class="group">
						@for (int i = (int)Pixel.MAX_LEVEL; i >= 0; i--)
						{
							var sel = designer.brushDesat == i;
							var color = Pixel.CalculateColor(designer.brushColor, 0, i);
							var unqI = i;
							<button @onclick=@(() => designer.brushDesat = unqI) class="clr @(sel ? "pressed" : "")"
								style="color: @color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span
									class="lbl">@((int)Pixel.MAX_LEVEL - i)</span></button>
						}
					</div>
					<div class="group">
						@for (int i = (int)Pixel.MAX_LEVEL; i >= 0; i--)
						{
							var sel = designer.brushDarken == i;
							var color = Pixel.CalculateColor(designer.brushColor, i, 0);
							var unqI = i;
							<button @onclick=@(() => designer.brushDarken = unqI) class="clr @(sel ? "pressed" : "")"
								style="color: @color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span
									class="lbl">@((int)Pixel.MAX_LEVEL - i)</span></button>
						}
					</div>
				</div>
			</div>
			break;
	}
</root>

@code
{
	private PaintingDesigner designer = new();
	private PaintingInspector goalInsp = new();
	private PaintingInspector resultInsp = new();

	private Workspace workspace;
	private string view = "main";
	private string launcher = "";

	private string ImportCode { get; set; } = "import code";
	private Scenario importedScene = new();
	private ScenarioData hoveredScene = null;
	private bool hoverIsImported = false;

	private int DailyYear { get; set; } = 0;
	private int DailyMonth { get; set; } = 0;
	private int DailyDay { get; set; } = 0;

	private string DesignerTitle { get; set; } = "Title";
	private string DesignerDesc { get; set; } = "Description";
	private string DesignerIO { get; set; } = "import/export code";
	private Scenario designScene = new();
	private int DesignerSize { get; set; } = 4;

	private int ingameBriefSize = 2;
	private string IngameBriefClass
	{
		get
		{
			if (ingameBriefSize == 1)
				return "min";
			else if (ingameBriefSize == 0)
				return "hidden";
			return "";
		}
	}

	private void SetIngameBriefSize(int igbs)
	{
		// this is a terrible way to do this, but yknow what, it works
		var cc = Scene.Get<CameraController>();
		if (cc is not null)
			cc.IngameBriefSize = igbs;
		ingameBriefSize = igbs;
	}

	private void UpdateDesignerSize()
	{
		DesignerSize = DesignerSize.Clamp(3, 16);
		designer.Resize(DesignerSize, DesignerSize);
	}

	protected override void OnStart()
	{
		workspace = Scene.Get<Workspace>();
	}

	private void ClickMenu()
	{
		view = "main";
	}

	private void ClickDaily()
	{
		view = "daily";
		ClickImportToday();
	}

	private void ClickImport()
	{
		view = "import";
		hoveredScene = null;
	}

	private void ClickLevelSelect()
	{
		view = "levels";
	}

	private void ClickLevelInfo(ScenarioData scene)
	{
		hoveredScene = scene;
		hoverIsImported = false;
	}

	private void ClickImportData()
	{
		if (importedScene.Import(ImportCode))
		{
			hoveredScene = new();
			importedScene.CopyTo(hoveredScene);
			hoverIsImported = true;
		}
	}

	private void ImportDaily()
	{
		if (importedScene.CreateDaily(DailyYear, DailyMonth, DailyDay))
		{
			hoveredScene = new();
			importedScene.CopyTo(hoveredScene);
			hoverIsImported = true;
		}
	}

	private void ClickImportDaily()
	{
		EnforceDate();
		ImportDaily();
	}

	private void ClickImportToday()
	{
		EnforceDate(true);
		ImportDaily();
	}

	private void EnforceDate(bool force = false)
	{
		if (force || DailyYear <= 0 || DailyMonth <= 0 || DailyDay <= 0 || DailyMonth > 12 || DailyDay >
		System.DateTime.DaysInMonth(DailyYear, DailyMonth))
		{
			var now = System.DateTime.Now;
			DailyYear = now.Year;
			DailyMonth = now.Month;
			DailyDay = now.Day;
		}
	}

	private void ClickPlayHovered()
	{
		BeginScenario(hoveredScene);
	}

	private void BeginScenario(ScenarioData sceneData)
	{
		launcher = view;
		workspace.BeginScenario(sceneData);
		SetIngameBriefSize(2);
		view = "ingame";
	}

	private void ClickQuitLevel()
	{
		workspace.ResetLevel();
		view = launcher;
	}

	private void ClickNextLevel()
	{
		var next = workspace.NextSceneData;
		if (next is null)
			ClickQuitLevel();
		else
			BeginScenario(next);
	}

	private void ClickRefine()
	{
		workspace.BeginRetry();
	}

	private void IgBriefExp()
	{
		SetIngameBriefSize(ingameBriefSize + 1);
	}

	private void IgBriefShrink()
	{
		if (ingameBriefSize == 0)
			SetIngameBriefSize(ingameBriefSize + 1);
		else
			SetIngameBriefSize(ingameBriefSize - 1);
	}

	private void SubmitSequence()
	{
		workspace.SubmitSequence();
	}

	private void EndDrag()
	{
		if (workspace.Dragging)
			workspace.EndDrag();
	}

	private int GetSolutionScore(Score.Data d)
	{
		return d.name switch
		{
			"Time" => workspace.finalScores.time,
			"Ink" => workspace.finalScores.ink,
			"Size" => workspace.finalScores.size,
			_ => 0
		};
	}

	private int GetMyScore(Score.Data d)
	{
		return System.Math.Min(GetSolutionScore(d), d.MyBest);
	}

	private int GetCurrentScore(Score.Data d, Sandbox.Services.Leaderboards.Board2.Entry entry)
	{
		if (entry.SteamId == Game.SteamId)
			return System.Math.Min(GetSolutionScore(d), (int)entry.Value);
		return (int)entry.Value;
	}

	private void ClickDesigner()
	{
		view = "design";
	}

	private void ClickCredit()
	{
		view = "credit";
	}

	private void DesignerExport()
	{
		designScene.title = DesignerTitle;
		designScene.desc = DesignerDesc;
		designScene.BakePainting(designer.paint);
		DesignerIO = designScene.Export();
	}

	private void DesignerExportPaint()
	{
		DesignerIO = designer.paint.Serialize();
	}

	private void DesignerImport()
	{
		designScene.Import(DesignerIO);
		DesignerTitle = designScene.title;
		DesignerDesc = designScene.desc;
		designer.paint = new(designScene.paint);
	}

	protected override int BuildHash() => System.HashCode.Combine(view, designer.brushColor, designer.brushDarken,
	designer.brushDesat, hoveredScene, ingameBriefSize, workspace.sequenceScore, workspace.finalScores);
}
