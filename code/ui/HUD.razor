@using Sandbox;
@using Sandbox.UI;
@namespace Reprint
@inherits PanelComponent

<root>
	@switch (view)
	{
		case "main":
			<div class="main view">
				<div class="title">Fauxto Shop</div>
				<div class="subtitle">a game by alxl</div>
				<div class="gap"></div>
				<div class="menu-list">
					<button class="stealth" @onclick=@ClickLevelSelect>Level Select</button>
					<button class="stealth" @onclick=@ClickDesigner>Scenario Designer</button>
				</div>
			</div>
			break;

		case "levels":
			<div class="levels view">
				<div class="subtitle">level select</div>
				<div class="level-list">
				@{
					var order = Scenario.Order;
					var idx = 1;
					foreach (var scene in order)
					{
						<button class="roundy" @onclick=@(() => ClickLevel(scene))> #@idx @(scene.Title)</button>
						idx++;
					}
				}
				</div>
				<div class="gutter">
					<button class="stealth" @onclick=@ClickMenu>Back</button>
				</div>
			</div>
			break;

		case "ingame":
			<div class="view @(workspace.Dragging ? "dragging" : "")" @onmouseup=@EndDrag>
				<div class="ingame brief open">
					<div class="title">@(workspace.currentScene.title)</div>
					<div class="desc">
					@{
						var lines = workspace.currentScene.desc.Split('\n');
						foreach (var line in lines)
						{
							<p>@line</p>
						}
					}
					</div>
					<div class="goal">
						<PaintCanvas class="medium" @listener=@goalInsp @cursor=@false @paint=@(workspace.targetPaint) @size=@(512.0f)></PaintCanvas>
						<div class="readout">@(goalInsp.CreateHoverReadoutVerbose(workspace.targetPaint))</div>
					</div>
				</div>
				<div class="toolbox">
					<div class="group">
						<button @onclick=@ClickQuitLevel>Quit</button>
					</div>
					<div class="group right">
						@foreach (var t in workspace.currentScene.Tools)
						{
							<button class="tool" @onmousedown=@(() => workspace.AddStep(t.Prefab))>@t.Title</button>
						}
					</div>
					<div class="group">
						<button @onclick=@SubmitSequence>Submit</button>
					</div>
				</div>
			</div>
			break;

		case "design":
			<div class="view">
				<div class="design-up">
					<div class="brief open">
						<TextEntry Value:bind=@DesignerTitle />
						<TextEntry class="tall" Multiline="@true" Value:bind=@DesignerDesc />
						<div style="flex-direction: row; gap: 4px; width: 100%; justify-content: space-evenly;">
							<button @onclick=@DesignerImport>Import</button>
							<button @onclick=@DesignerExport>Export</button>
							<button @onclick=@DesignerExportPaint>Exp. Paint</button>
						</div>
						<TextEntry class="tall" Multiline="@true" Value:bind=@DesignerIO />
					</div>
					<div class="design-work">
						<PaintCanvas @listener=@designer class="big" @cursor=@false @paint=@(designer.paint) @size=@(1024.0f)></PaintCanvas>
					</div>
				</div>
				<div class="toolbox">
					<button @onclick=@ClickMenu>Back</button>
					<div style="width: 64px; height: 64px; background-color: @(designer.CalculateColor().Hex); border: 2px solid @(Pixel.CalculateContrastColor(designer.brushDarken).Hex)"></div>
					<div class="group">
					@foreach ( Pixel.ColorLookup clr in System.Enum.GetValues<Pixel.ColorLookup>() )
					{
						var sel = designer.brushColor == clr;
						var color = Pixel.GetColor(clr);
						<button @onclick=@(() => designer.brushColor = clr) class="clr @(sel ? "pressed" : "")" style="color: @color.color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span class="lbl">@(color.Initial)</span></button>
					}
					</div>
					<div class="group">
					@for (int i = (int)Pixel.MAX_LEVEL; i >= 0; i--)
					{
						var sel = designer.brushDesat == i;
						var color = Pixel.CalculateColor(designer.brushColor, 0, i);
						var unique_i = i;
						<button @onclick=@(() => designer.brushDesat = unique_i) class="clr @(sel ? "pressed" : "")" style="color: @color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span class="lbl">@((int)Pixel.MAX_LEVEL - i)</span></button>
					}
					</div>
					<div class="group">
					@for (int i = (int)Pixel.MAX_LEVEL; i >= 0; i--)
					{
						var sel = designer.brushDarken == i;
						var color = Pixel.CalculateColor(designer.brushColor, i, 0);
						var unique_i = i;
						<button @onclick=@(() => designer.brushDarken = unique_i) class="clr @(sel ? "pressed" : "")" style="color: @color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span class="lbl">@((int)Pixel.MAX_LEVEL - i)</span></button>
					}
					</div>
				</div>
			</div>
			break;
	}
</root>

@code
{
	private PaintingDesigner designer = new();
	private PaintingInspector goalInsp = new();

	private Workspace workspace;
	private string view = "main";

	private string DesignerTitle { get; set; } = "Title";
	private string DesignerDesc { get; set; } = "Description";
	private string DesignerIO { get; set; } = "import/export code";
	private Scenario designScene = new();

	protected override void OnStart()
	{
		workspace = Scene.Get<Workspace>();
	}

	private void ClickMenu()
	{
		view = "main";
	}

	private void ClickLevelSelect()
	{
		view = "levels";
	}

	private void ClickLevel(ScenarioData scene)
	{
		workspace.BeginScenario(scene);
		view = "ingame";
	}

	private void ClickQuitLevel()
	{
		workspace.ResetLevel();
		view = "levels";
	}

	private void SubmitSequence()
	{
		workspace.SubmitSequence();
	}

	private void EndDrag()
	{
		if (workspace.Dragging)
			workspace.EndDrag();
	}

	private void ClickDesigner()
	{
		view = "design";
	}

	private void DesignerExport()
	{
		designScene.title = DesignerTitle;
		designScene.desc = DesignerDesc;
		designScene.BakePainting(designer.paint);
		DesignerIO = designScene.Export();
	}

	private void DesignerExportPaint()
	{
		DesignerIO = designer.paint.Serialize();
	}

	private void DesignerImport()
	{
		designScene.Import(DesignerIO);
		DesignerTitle = designScene.title;
		DesignerDesc = designScene.desc;
		designer.paint.Deserialize(designScene.paint);
	}

	protected override int BuildHash() => System.HashCode.Combine( view, designer.brushColor, designer.brushDarken, designer.brushDesat );
}
