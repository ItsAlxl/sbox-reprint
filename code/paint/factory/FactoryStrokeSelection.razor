@namespace Reprint

<root>
	@if (ShowBurnSponge)
	{
		<div class="row">
			<button @onclick=@(() => StrokeStep.MainMode = FactoryStroke.Mode.Paint)
				class="@(!StrokeStep.useFig && StrokeStep.MainMode == FactoryStroke.Mode.Paint ? "pressed " : "")">
				<svg src="icons/brush.svg"></svg>
			</button>
			<button @onclick=@(() => StrokeStep.MainMode = FactoryStroke.Mode.Burn)
				class="@(!StrokeStep.useFig && StrokeStep.MainMode == FactoryStroke.Mode.Burn ? "pressed " : "")">
				<svg src="icons/burn.svg"></svg>
			</button>
			<button @onclick=@(() => StrokeStep.MainMode = FactoryStroke.Mode.Sponge)
				class="@(!StrokeStep.useFig && StrokeStep.MainMode == FactoryStroke.Mode.Sponge ? "pressed " : "")">
				<svg src="icons/sponge.svg"></svg>
			</button>
			@if (ShowConfigurator)
			{
				<button @onclick=@(() => StrokeStep.useFig = true) class="@(StrokeStep.useFig ? "pressed " : "")">
					<svg src="icons/cog.svg"></svg>
				</button>
			}
		</div>
		<div style="margin-top: 8px"></div>
	}
	<div class="@(StrokeStep.MainMode == FactoryStroke.Mode.Paint ? "group" : "col")">
		@{
			var isMain = !StrokeStep.useFig;
			var stroke = StrokeStep.CurrentStroke;
			if (stroke.mode == FactoryStroke.Mode.Burn)
			{
				<div class="row">
					@if (isMain)
					{
						<button class="sm" @onclick=@(() => stroke.DarkenAmt++)>remove</button>
					}
					<span class="fixed-num">@(FormatLevelText(stroke.DarkenAmt))</span>
					@if (isMain)
					{
						<button class="sm" @onclick=@(() => stroke.DarkenAmt--)>add</button>
					}
				</div>

				var from = stroke.DarkenAmt < 0 ? Pixel.CalculateColor(Pixel.ColorLookup.Red, -stroke.DarkenAmt, 0) :
				Pixel.CalculateColor(Pixel.ColorLookup.Red, 0, 0);
				var to = stroke.DarkenAmt < 0 ? Pixel.CalculateColor(Pixel.ColorLookup.Red, 0, 0) :
				Pixel.CalculateColor(Pixel.ColorLookup.Red, stroke.DarkenAmt, 0);
				<div class="row">
					<span class="ex-pxl" style="background-color: @(from.Hex)"></span>
					<span class="ex-arrow">arrow_forward</span>
					<span class="ex-pxl" style="background-color: @(to.Hex)"></span>
				</div>
			}
			else if (stroke.mode == FactoryStroke.Mode.Sponge)
			{
				<div class="row">
					@if (isMain)
					{
						<button class="sm" @onclick=@(() => stroke.DesatAmt++)>remove</button>
					}
					<span class="fixed-num">@(FormatLevelText(stroke.DesatAmt))</span>
					@if (isMain)
					{
						<button class="sm" @onclick=@(() => stroke.DesatAmt--)>add</button>
					}
				</div>

				var from = stroke.DesatAmt < 0 ? Pixel.CalculateColor(Pixel.ColorLookup.Red, 0, -stroke.DesatAmt) :
				Pixel.CalculateColor(Pixel.ColorLookup.Red, 0, 0);
				var to = stroke.DesatAmt < 0 ? Pixel.CalculateColor(Pixel.ColorLookup.Red, 0, 0) :
				Pixel.CalculateColor(Pixel.ColorLookup.Red, 0, stroke.DesatAmt);
				<div class="row">
					<span class="ex-pxl" style="background-color: @(from.Hex)"></span>
					<span class="ex-arrow">arrow_forward</span>
					<span class="ex-pxl" style="background-color: @(to.Hex)"></span>
				</div>
			}
			else
			{
				@if (isMain)
				{
					foreach (Pixel.ColorLookup clr in System.Enum.GetValues<Pixel.ColorLookup>())
					{
						var sel = stroke.color == clr;
						var color = Pixel.GetColor(clr);
						<button @onclick=@(() => stroke.color = clr) class="clr sm @(sel ? "pressed" : "")"
							style="color: @color.color.Hex"><span>radio_button_@(sel ? "" : "un")checked</span><span
								class="lbl">@(color.Initial)</span></button>
					}
				}
				else
				{
					<span class="ex-pxl" style="background-color: @(Pixel.GetColor(stroke.color).color.Hex)"></span>
				}
			}
		}
	</div>
</root>

@code
{
	public FactoryStepStroke StrokeStep { get; set; }
	public bool ShowBurnSponge { get; set; } = true;
	public bool ShowConfigurator { get; set; } = true;

	private string FormatLevelText(int level)
	{
		return (level < 0 ? "+" : "") + -level;
	}

	protected override int BuildHash() => System.HashCode.Combine(StrokeStep.CurrentStroke, StrokeStep.CurrentStroke.color, StrokeStep.CurrentStroke.DarkenAmt, StrokeStep.CurrentStroke.DesatAmt);
}
