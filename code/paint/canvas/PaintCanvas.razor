@namespace Reprint

<root style="width: @(size)px; height: @(size)px">
	@{
		Painting showPaint = paint ?? new(paintSource());
		if (showPaint is null)
		{
			<div>null paint</div>
		}
		else
		{
			int limit = showPaint.width > showPaint.height ? showPaint.width : showPaint.height;
			float side = size / limit;
			string sidePx = (int)side + "px";
			int padX = showPaint.width > showPaint.height ? 0 : (int)( (size - side * showPaint.width) / 2 );
			int padY = showPaint.height > showPaint.width ? 0 : (int)( (size - side * showPaint.height) / 2 );
			for (var y = 0; y < showPaint.height; y++)
			{
				var unqY = y;
				@for (var x = 0; x < showPaint.width; x++)
				{
					var unqX = x;
					var pxl = showPaint.PixelAt(unqX, unqY);
					<div @onmouseover=@(() => EmitHover(pxl, unqX, unqY)) @onmousedown=@((ev) => EmitClick(ev, pxl, unqX,
		unqY))
						style="left: @(padX + side * x)px; top: @(padY + side * y)px; background-color: @pxl.FinalColor.Hex; color: @pxl.ContrastGray.Hex; width: @sidePx; height: @sidePx; font-size: @sidePx">
						@((cursor && unqX == showPaint.cursorX && unqY == showPaint.cursorY) ? "‚Øè" : "")
					</div>
				}
			}
		}
	}
</root>

@code
{
	public ICanvasListener listener = null;

	[Property] public float size = 128.0f;
	public System.Func<string> paintSource = null;
	public Painting paint = null;
	public bool cursor = true;
	private bool mouseInside = false;

	private void EmitHover(Pixel p, int x, int y)
	{
		listener?.OnPxlHover(p, x, y);
	}

	private void EmitClick(Sandbox.UI.PanelEvent ev, Pixel p, int x, int y)
	{
		if (ev is Sandbox.UI.MousePanelEvent mEv)
		{
			var btn = mEv.Button;
			if (btn == "mouseleft")
				listener?.OnPxlLClick(p, x, y);
			else if (btn == "mouseright")
				listener?.OnPxlRClick(p, x, y);
		}
	}

	public override void Tick()
	{
		var nowInside = HasHovered;
		if (nowInside != mouseInside)
		{
			mouseInside = nowInside;
			listener?.OnMouseCross(nowInside);
		}
	}

	protected override int BuildHash() => System.HashCode.Combine(paintSource?.Invoke(), paint, paint?.BuildHash() ?? 0);
}
