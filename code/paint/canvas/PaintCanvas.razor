@namespace Reprint

<root>
	@if (paint is null)
	{
		<div>null paint</div>
	}
	else
	{
		int limit = paint.width > paint.height ? paint.width : paint.height;
		float side = (0.5f * size - limit) / limit;
		string sidePx = (int)side + "px";
		string fontPx = (int)side + "px";
		for(var y = 0; y < paint.height; y++)
		{
			var unique_y = y;
			<div class="row">
			@for(var x = 0; x < paint.width; x++)
			{
				var unique_x = x;
				var pxl = paint.PixelAt(unique_x, unique_y);
				<div
					@onmouseover=@(() => EmitHover(pxl, unique_x, unique_y))
					@onclick=@(() => EmitLClick(pxl, unique_x, unique_y))
					@onrightclick=@(() => EmitRClick(pxl, unique_x, unique_y))
					style="background-color: @pxl.FinalColor.Hex; color: @pxl.ContrastGray.Hex; border-color: @pxl.ContrastGray.Hex; width: @sidePx; height: @sidePx; font-size: @fontPx"
				>
					@((cursor && unique_x == paint.cursorX && unique_y == paint.cursorY) ? "‚Øè" : "")
				</div>
			}
			</div>
		}
	}
</root>

@code
{
	public ICanvasListener listener = null;

	[Property] public float size = 256.0f;
	public Painting paint;
	public bool cursor = true;

	private void EmitHover(Pixel p, int x, int y)
	{
		listener?.OnPxlHover( p, x, y );
	}

	private void EmitLClick(Pixel p, int x, int y)
	{
		listener?.OnPxlLClick( p, x, y );
	}

	private void EmitRClick(Pixel p, int x, int y)
	{
		listener?.OnPxlRClick( p, x, y );
	}

	protected override int BuildHash() => System.HashCode.Combine( paint.BuildHash() );
}
